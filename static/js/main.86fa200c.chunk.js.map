{"version":3,"sources":["components/Heading.js","components/PokeCard.js","components/PokeList.js","containers/Quadrant.jsx","components/Drawer.jsx","api.js","containers/App.js","serviceWorker.js","index.js"],"names":["Heading","props","className","map","id","alt","src","pokeCard","name","height","weight","types","onClick","type","key","PokeList","pokemons","onCardClick","pokeData","Quadrant","state","searchfield1","searchfield2","box","display","width","textAlign","gridTemplateRows","this","style","selectedPokemon","gridTemplateColumns","buttonStyle","click","button","Component","Drawer","placeholder","onChange","searchChange","children","defaultFetchPokemonOptions","limit","offset","fetchPokemon","fetch","then","response","json","allPokemon","results","pokemon","fetchPokemonData","pokePromises","Promise","all","url","App","onSearchChange","event","setState","searchfield","target","value","isDrawerOpen","selectedBluePokemon","selectedRedPokemon","sectionSelected","drawer","drawerOpenClose","filterPokemon","filter","toLowerCase","includes","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86fa200c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Heading.css\";\r\n\r\nconst Heading = (props) => {\r\n  const ids = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30];\r\n  return (\r\n    <div className=\"heading\">\r\n      {ids.map((id) => {\r\n        return (\r\n          <img\r\n            className=\"heading-image\"\r\n            alt=\"Pokemon\"\r\n            src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`}\r\n          ></img>\r\n        );\r\n      })}\r\n      <h1 className=\"title\">Pokecomp!</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Heading;\r\n","import React from \"react\";\r\nimport \"./PokeCard.css\";\r\n\r\nconst pokeCard = ({ name, height, weight, id, types, onClick }) => {\r\n  const clickListener = () => {\r\n    if (onClick) {\r\n      onClick({ name, height, weight, id, types });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\" onClick={clickListener}>\r\n      <div className=\"thumbnailBox\">\r\n        <img\r\n          className=\"thumbnails\"\r\n          alt=\"Pokemon\"\r\n          src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`}\r\n        />\r\n      </div>\r\n      <div className=\"pokeinfo\">\r\n        <h1>{name}</h1>\r\n        <ul>\r\n          <li>height: {height}</li>\r\n          <li>weight: {weight}</li>\r\n          <li>\r\n            types:\r\n            <ul>\r\n              {types &&\r\n                types.map((type) => {\r\n                  return <li key={type.type.name}>{type.type.name}</li>;\r\n                })}\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default pokeCard;\r\n","import React from \"react\";\r\nimport PokeCard from \"./PokeCard\";\r\n\r\nconst PokeList = ({ pokemons, onCardClick }) => {\r\n  return (\r\n    <div>\r\n      {pokemons.map((pokeData) => {\r\n        return (\r\n          <PokeCard\r\n            key={pokeData.id}\r\n            id={pokeData.id}\r\n            name={pokeData.name}\r\n            height={pokeData.height}\r\n            weight={pokeData.weight}\r\n            types={pokeData.types}\r\n            onClick={onCardClick}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeList;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport PokeCard from \"../components/PokeCard\";\r\n\r\nclass Quadrant extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pokemons: [],\r\n      searchfield1: \"\",\r\n      searchfield2: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // const { pokemons } = this.state;\r\n    const box = {\r\n      display: \"inline-grid\",\r\n      width: \"50%\",\r\n      height: \"700px\",\r\n      textAlign: \"center\",\r\n      gridTemplateRows: \"40px auto\",\r\n      ...this.props.style,\r\n    };\r\n\r\n    const bar = {\r\n      display: \"inline-grid\",\r\n      gridTemplateColumns: \"15% 70% 15%\",\r\n    };\r\n\r\n    const { selectedPokemon } = this.props;\r\n\r\n    return (\r\n      <div style={box} className=\"Box\">\r\n        <div style={bar} className=\"searchBox1\">\r\n          <button\r\n            style={this.props.buttonStyle}\r\n            className=\"searchButton\"\r\n            onClick={this.props.click}\r\n          >\r\n            Set {this.props.button}!\r\n          </button>\r\n        </div>\r\n        {selectedPokemon && (\r\n          <PokeCard\r\n            id={selectedPokemon.id}\r\n            name={selectedPokemon.name}\r\n            height={selectedPokemon.height}\r\n            weight={selectedPokemon.weight}\r\n            types={selectedPokemon.types}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quadrant;\r\n\r\n/* \r\n1. props\r\n2. prop types\r\n3. class components\r\n*/\r\n","import React from \"react\";\r\nimport \"./Drawer.css\";\r\n\r\nconst Drawer = (props) => {\r\n  return (\r\n    <div className=\"drawer\">\r\n      <button className=\"drawerClose\" onClick={props.click}>\r\n        x\r\n      </button>\r\n      <div className=\"cardSearchBar\">\r\n        <input\r\n          className=\"drawerSearch\"\r\n          type=\"text\"\r\n          placeholder=\"Whatcha lookin for?\"\r\n          onChange={props.searchChange}\r\n        />\r\n      </div>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Drawer;\r\n","const defaultFetchPokemonOptions = { limit: 151, offset: 0 };\r\nexport const fetchPokemon = ({\r\n  limit = 151,\r\n  offset = 0,\r\n} = defaultFetchPokemonOptions) => {\r\n  return fetch(\r\n    `https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}`\r\n  )\r\n    .then((response) => response.json())\r\n    .then((allPokemon) =>\r\n      allPokemon.results.map((pokemon) => fetchPokemonData(pokemon))\r\n    )\r\n    .then((pokePromises) => Promise.all(pokePromises));\r\n};\r\n\r\nexport const fetchPokemonData = (pokemon) => {\r\n  let url = pokemon.url;\r\n  return fetch(url).then((response) => response.json());\r\n};\r\n\r\nexport const fetchAllPokemon = () => {\r\n  return Promise.all([\r\n    fetchPokemon({ limit: 100, offset: 0 }),\r\n    fetchPokemon({ limit: 51, offset: 100 }),\r\n  ]);\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Heading from \"../components/Heading\";\nimport PokeList from \"../components/PokeList\";\nimport Quadrant from \"./Quadrant\";\nimport Drawer from \"../components/Drawer\";\nimport { fetchPokemon } from \"../api\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      searchfield: \"\",\n      isDrawerOpen: false,\n      selectedBluePokemon: null,\n      selectedRedPokemon: null,\n      sectionSelected: null,\n    };\n  }\n\n  componentDidMount() {\n    fetchPokemon().then((pokeData) => this.setState({ pokemons: pokeData }));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const { pokemons, searchfield } = this.state;\n\n    const drawerOpenClose = () => {\n      if (!this.state.isDrawerOpen) {\n        this.setState({\n          isDrawerOpen: true,\n        });\n      } else {\n        this.setState({\n          isDrawerOpen: false,\n        });\n      }\n    };\n\n    const blueSectionClicked = () => {\n      drawerOpenClose();\n      this.setState({ sectionSelected: \"blue\" });\n    };\n\n    const redSectionClicked = () => {\n      drawerOpenClose();\n      this.setState({ sectionSelected: \"red\" });\n    };\n\n    const filterPokemon = pokemons.filter((pokemon) => {\n      return (\n        pokemon.name.toLowerCase().includes(searchfield.toLowerCase()) ||\n        `${pokemon.id}`.includes(searchfield)\n      );\n    }); // I would also like the filter to look for the pokemon id//\n\n    let drawer;\n    if (this.state.isDrawerOpen) {\n      drawer = (\n        <Drawer searchChange={this.onSearchChange} click={drawerOpenClose}>\n          <PokeList\n            onCardClick={(value) => {\n              if (this.state.sectionSelected === \"blue\") {\n                this.setState({ selectedBluePokemon: value });\n              } else if (this.state.sectionSelected === \"red\") {\n                this.setState({ selectedRedPokemon: value });\n              }\n              this.setState({\n                isDrawerOpen: false,\n              });\n            }}\n            pokemons={filterPokemon}\n          />\n        </Drawer>\n      );\n    } // how is this possible? doesnt a variable need an = after it?\n\n    return (\n      <div className=\"page\">\n        <Heading />\n        <Quadrant\n          className=\"blueBox\"\n          button=\"Blue\"\n          style={{ backgroundColor: \"#3182ce\" }}\n          click={blueSectionClicked}\n          selectedPokemon={this.state.selectedBluePokemon}\n        />\n        <Quadrant\n          className=\"redBox\"\n          button=\"Red\"\n          style={{ backgroundColor: \"#fc8181\" }}\n          click={redSectionClicked}\n          selectedPokemon={this.state.selectedRedPokemon}\n        />\n        {drawer}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}